{"basic_builder": {"appname": "TA-sandfly_devices", "friendly_name": "sandfly_devices", "version": "1.0.0", "author": "ZachTheSplunker", "description": "", "theme": "#708794", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADHklEQVRYR+2YCU8iQRCFCxRQFMQbJHiBx///NR6AB0FFwPtWYPNVtkjvggMMxiUbOyEy9EzXq1evXk0MyIitwIjhkdEGtLe31/oXjO3u7raJ+YOhH0C/y/F/MzQ5OSmtVkuCwaC8v7/rZ9DlmyGC5nI5eXl5kefnZ5mbm5P7+3s5OztTDCsrKxKLxaRer8vExIREo1HJ5/PSbDY9MfoGNDMzI7e3t30TEAgEZHp6WkF7Ld+AYKdQKGiJWMlkUgDJNcEbjYZcXl7K3d2d7sPoxsaGPvNlgDg0Ho/LwsKC0s9aW1uTx8dHqdVqHXEABgiAPTw86H42m5Wrqyu5ublpJ+M+OBBD29vbcnBwoAzAhF1z4NbWlnx8fMjR0VFbQ4ic66mpKS3X+fm5MoWOuP/w8LAjiYEAra6uyunpqR7iHhgKhRQg+8ViUfd3dnZkf39fGaVsCJxlGlpfX5fj4+PhAC0uLkq1WtVs397e9MPqBxD3UT5jkK6kdH+vgRiyrO0vhyUSCYlEItreMGQinp+fV4bS6bTaggXnfvTjnuFLQ+hhdnZWfcaYQtwAsU7rSNf5wcptustkMso2PuYLEObGwwia72QNwOvray8c7T2MkmTcRkDsdKgvQDjt09OTjI2Nyfj4uLy+vio4mON3r+Xeh3+ZZaBFswN7vm8NhcNh9R+ydF3aMvcC5DJp2qFkFxcXHfOub0BuK29ubna0txcgt8UReblcHl7UBIQhHNllBac+OTnxLJnphg5j/tEEn+lvIIaguVQqaXDzFLTF3EJT3RbODBDa3vUh12R9iZqHyBS7R6RoCveldTkcYeMvjA8Wwke06A0GjSWagtHBTDNx+wZEtrTq0tKSTm3af3l5uV0yl0ETPsDQHDPQmMW7GCHd/GugkrmZkCFjgGwBQub4FJ3Dgr1UKiWVSkV1wz5M2uj4THS+AXUTpYmeYDZULTBlBqSNli8HRABMjvdmgjBO+G7TnjIxdHkXAgiac1/ovhxQtwPRFKVBa5TvW1/yPY1niE3fGhoipuejP4B6MfspQ70e/I790f7/0Hcw0CvGL3K2LkNNaprrAAAAAElFTkSuQmCC", "visible": true, "tab_version": "4.1.1", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "sandfly:devices", "interval": "300", "use_external_validation": true, "streaming_mode_xml": true, "name": "sandfly_devices", "title": "Sandfly Devices", "description": "Collects host information from Sandfly", "type": "customized", "parameters": [{"name": "global_account", "label": "Global Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": ""}, {"required": false, "name": "host_summary", "label": "Host Summary", "default_value": true, "help_string": "If checked, returns flattened summary view of all hosts.", "type": "checkbox", "format_type": "checkbox", "value": true}], "data_inputs_options": [{"type": "customized_var", "name": "global_account", "title": "Global Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "host_summary", "title": "Host Summary", "description": "If checked, returns flattened summary view of all hosts.", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": true}], "code": "\n# encoding = utf-8\n\nimport json\nfrom SandflyAuth import SandflyAuth\nfrom sandfly_utils import *\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # global_account = definition.parameters.get('global_account', None)\n    pass\n\n\ndef collect_events(helper, ew):\n    log_level = helper.get_log_level()\n    helper.set_log_level(log_level)\n    helper.log_info(f'msg=\"logging level set\", log_level=\"{log_level}\"')\n\n    global_account = helper.get_arg('global_account')\n    hostname = global_account['hostname']\n    username = global_account['username']\n    password = global_account['password']\n    ca_cert = global_account['ca_cert']\n    verify_cert = global_account['verify_cert']\n\n    stanza = str(helper.get_input_stanza_names())\n\n    proxy = helper.get_proxy()\n    event_type = 'proxy_config'\n    if proxy:\n        if proxy[\"proxy_username\"]:\n            event_log = sf_logger(\n                msg='Proxy is configured with authentication',\n                action='success',\n                event_type=event_type,\n                stanza=stanza,\n                hostname=hostname\n            )\n            helper.log_info(event_log)\n\n        else:\n            event_log = sf_logger(\n                msg='Proxy is configured with no authentication',\n                action='success',\n                event_type=event_type,\n                stanza=stanza,\n                hostname=hostname\n            )\n            helper.log_info(event_log)\n\n        proxy_config = True\n    else:\n        proxy_config = False\n\n    def get_hosts():\n        event_type = 'input_get_hosts'\n\n        # Check if it is time to run\n        if not checkpointer(helper, hostname, stanza):\n            return False\n\n        event_log = sf_logger(\n            msg='Starting event collection',\n            action='started',\n            event_type=event_type,\n            stanza=stanza,\n            hostname=hostname\n        )\n        helper.log_info(event_log)\n\n        sandfly = SandflyAuth(\n            username=username,\n            password=password,\n            hostname=hostname,\n            ca_cert=ca_cert,\n            verify_cert=verify_cert,\n            use_proxy=proxy_config\n        )\n\n        result, token_message = sandfly.get_token(helper, stanza)\n        if result == 'success':\n            event_log = sf_logger(\n                msg='Retrieved token',\n                action='success',\n                event_type=event_type,\n                stanza=stanza,\n                hostname=hostname\n            )\n            helper.log_info(event_log)\n        else:\n            helper.log_error(token_message)\n            return False\n\n        result, hosts_message = sandfly.get_hosts(helper, stanza)\n        if result == 'success':\n            event_log = sf_logger(\n                msg='Retrieved hosts',\n                action='success',\n                event_type=event_type,\n                stanza=stanza,\n                hostname=hostname\n            )\n            helper.log_info(event_log)\n            host_data = hosts_message\n        else:\n            helper.log_error(hosts_message)\n            return False\n\n        event_count = 0\n        for data in host_data['data']:\n            event = helper.new_event(\n                source=helper.get_input_type(),\n                index=helper.get_output_index(),\n                sourcetype=helper.get_sourcetype(),\n                data=json.dumps(data),\n                host=hostname\n            )\n            ew.write_event(event)\n            event_count += 1\n\n        event_log = sf_logger(\n            msg='Completed host ingestion',\n            action='success',\n            event_type=event_type,\n            stanza=stanza,\n            hostname=hostname,\n            event_count=event_count\n        )\n        helper.log_info(event_log)\n\n        # Checkpointer\n        checkpointer(helper, hostname, stanza, setCheckpoint=True)\n\n        result, message = sandfly.logout(helper, stanza)\n        if result == 'success':\n            event_log = sf_logger(\n                msg='Logged out',\n                action='success',\n                event_type=event_type,\n                stanza=stanza,\n                hostname=hostname\n            )\n            helper.log_info(event_log)\n        else:\n            helper.log_error(message)\n            return False\n\n    get_hosts()\n", "customized_options": [{"name": "global_account", "value": ""}, {"name": "host_summary", "value": true}], "uuid": "c4a7aec83fcc466eaaf6ee8131cf33bd", "sample_count": "100"}]}, "field_extraction_builder": {"sandfly:devices": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "log_settings": {}, "credential_settings": []}}, "sourcetype_builder": {"sandfly:devices": {"metadata": {"event_count": 0, "data_input_name": "sandfly_devices", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation"], "status": "job_started", "validation_id": "v_1660945403_67"}}